//------------------------------
// Shape_poly.cpp
// 多角形
//------------------------------
#include "pch.h"
#include <corecrt_math.h>
#include "shape.h"

using namespace winrt;

namespace winrt::GraphPaper::implementation
{
	// 多角形の各辺の法線ベクトルを得る.
	static bool poly_get_nor(const size_t m, const D2D1_POINT_2F v_pos[], D2D1_POINT_2F n_vec[]) noexcept;

	// 直行するベクトルを得る.
	static D2D1_POINT_2F poly_pt_orth(const D2D1_POINT_2F vec) { return { -vec.y, vec.x }; }

	// 多角形の各辺が位置を含むか調べる.
	static bool poly_test_side(const D2D1_POINT_2F t_pos, const size_t m, const D2D1_POINT_2F q_pos[], const D2D1_POINT_2F n_vec[], const double exp, D2D1_POINT_2F q_exp[]) noexcept;

	// 多角形の各角が位置を含むか調べる.
	static bool poly_test_corner(const D2D1_POINT_2F t_pos, const size_t m, const D2D1_POINT_2F exp[], const D2D1_POINT_2F n_vec[], const double ext) noexcept;

	//	多角形の各辺の法線ベクトルを得る.
	//	m	頂点の数
	//	v_pos	頂点の配列 [m]
	//	n_vec	各辺の法線ベクトルの配列 [m]
	//	戻り値	法線ベクトルを得たなら true, すべての頂点が重なっていたなら false
	static bool poly_get_nor(const size_t m, const D2D1_POINT_2F v_pos[], D2D1_POINT_2F n_vec[]) noexcept
	{
		// 多角形の各辺の長さと法線ベクトル, 
		// 重複しない頂点の数を求める.
		std::vector<double> s_len(m);	// 各辺の長さ
		int q_cnt = 1;
		for (size_t i = 0; i < m; i++) {
			// 次の頂点との差分を求める.
			D2D1_POINT_2F q_sub;
			pt_sub(v_pos[(i + 1) % m], v_pos[i], q_sub);
			// 差分の長さを求める.
			s_len[i] = sqrt(pt_abs2(q_sub));
			if (s_len[i] > FLT_MIN) {
				// 差分の長さが 0 より大きいなら, 
				// 重複しない頂点の数をインクリメントする.
				q_cnt++;
			}
			// 差分と直行するベクトルを正規化して法線ベクトルに格納する.
			pt_scale(poly_pt_orth(q_sub), 1.0 / s_len[i], n_vec[i]);
		}
		if (q_cnt == 1) {
			// すべての頂点が重なったなら, false を返す.
			return false;
		}
		for (size_t i = 0; i < m; i++) {
			if (s_len[i] <= FLT_MIN) {
				// 辺の長さが 0 ならば,
				// 辺に隣接する前後の辺の中から
				// 長さが 0 でない辺を探し,
				// それらの法線ベクトルを合成し, 
				// 長さ 0 の辺の法線ベクトルとする.
				size_t prev;
				for (size_t j = 1; s_len[prev = ((i - j) % m)] < FLT_MIN; j++);
				size_t next;
				for (size_t j = 1; s_len[next = ((i + j) % m)] < FLT_MIN; j++);
				pt_add(n_vec[prev], n_vec[next], n_vec[i]);
				auto len = sqrt(pt_abs2(n_vec[i]));
				if (len > FLT_MIN) {
					pt_scale(n_vec[i], 1.0 / len, n_vec[i]);
					continue;
				}
				// 合成ベクトルがゼロベクトルになるなら,
				// 直前の法線ベクトルに直交するベクトルを法線ベクトルとする.
				n_vec[i] = poly_pt_orth(n_vec[prev]);
			}
		}
		return true;
	}

	// 多角形の各辺が位置を含むか調べる.
	// t_pos	調べる位置
	// m	頂点の数
	// v_pos	頂点の配列 [m]
	// n_vec	各辺の法線ベクトルの配列 [m]
	// s_width	辺の太さ
	// exp_side	拡張した辺の配列 [m × 4]
	static bool poly_test_side(const D2D1_POINT_2F t_pos, const size_t m, const D2D1_POINT_2F v_pos[], const D2D1_POINT_2F n_vec[], const double s_width, D2D1_POINT_2F exp_side[]) noexcept
	{
		for (size_t i = 0; i < m; i++) {
			// 辺の片方の端点を法線ベクトルにそって
			// 太さの半分だけ移動した位置を
			// 拡張した辺に格納する.
			D2D1_POINT_2F nor;
			pt_scale(n_vec[i], s_width, nor);
			const auto j = i * 4;
			pt_add(v_pos[i], nor, exp_side[j + 0]);
			// 逆方向にも移動し, 拡張した辺に格納する.
			pt_sub(v_pos[i], nor, exp_side[j + 1]);
			// 辺のもう一方の端点を法線ベクトルにそって
			// 太さの半分だけ移動した位置を
			// 拡張した辺に格納する.
			const auto k = (i + 1) % m;
			pt_sub(v_pos[k], nor, exp_side[j + 2]);
			// 逆方向にも移動し, 拡張した辺に格納する.
			pt_add(v_pos[k], nor, exp_side[j + 3]);
			// 位置が拡張した辺に含まれるか調べる.
			if (pt_in_poly(t_pos, 4, exp_side + j)) {
				// 含まれるなら true を返す.
				return true;
			}
		}
		return false;
	}

	//	多角形の各角が位置を含むか調べる.
	//	t_pos	調べる位置
	// 	m	辺の数
	//	exp_side	拡張した辺の配列 [m × 4]
	//	n_vec	各辺の法線ベクトルの配列 [m]
	//	ext_len	角を超えて延長する長さ
	static bool poly_test_corner(const D2D1_POINT_2F t_pos, const size_t m, const D2D1_POINT_2F exp_side[], const D2D1_POINT_2F n_vec[], const double ext_len) noexcept
	{
		D2D1_POINT_2F ext_side[4];	// 拡張した辺をさらに延長した辺
		D2D1_POINT_2F p_vec;	// 平行なベクトル

		for (size_t i = 0, j = m - 1; i < m; j = i++) {
			// ある頂点に隣接する辺について.
			// 拡張した辺の端を, 延長した辺の端に格納する.
			ext_side[0] = exp_side[m * j + 3];
			ext_side[1] = exp_side[m * j + 2];
			// 法線ベクトルと直行するベクトルを,
			// 延長する長さの分だけ倍し,
			// 平行なベクトルに格納する.
			pt_scale(poly_pt_orth(n_vec[j]), ext_len, p_vec);
			// 格納した位置を平行なベクトルに沿って延長し,
			// 延長した辺のもう一方の端に格納する.
			pt_sub(ext_side[1], p_vec, ext_side[2]);
			pt_sub(ext_side[0], p_vec, ext_side[3]);
			// 位置が延長した辺に含まれるか調べる.
			if (pt_in_poly(t_pos, 4, ext_side) != true) {
				// 含まれないなら継続する.
				continue;
			}
			// 隣接するもう片方の辺について.
			// 拡張した辺の端を, 延長した辺の端に格納する.
			ext_side[2] = exp_side[m * i + 1];
			ext_side[3] = exp_side[m * i + 0];
			// 法線ベクトルと直行するベクトル (先ほどとは逆方向) を得て,
			// 角を延長する長さの分だけ倍し,
			// 平行なベクトルに格納する.
			pt_scale(poly_pt_orth(n_vec[i]), ext_len, p_vec);
			// 格納した位置を平行なベクトルに沿って延長し,
			// 延長した辺のもう一方の端に格納する.
			pt_add(ext_side[3], p_vec, ext_side[0]);
			pt_add(ext_side[2], p_vec, ext_side[1]);
			// 位置が延長した辺に含まれるか調べる.
			if (pt_in_poly(t_pos, 4, ext_side)) {
				// 含まれるなら true を返す.
				return true;
			}
		}
		return false;
	}

	// パスジオメトリを作成する.
	void ShapePoly::create_path_geometry(void)
	{
		const size_t m = m_diff.size() + 1;	// 頂点の数 (差分の数 + 1)
		std::vector<D2D1_POINT_2F> v_pos(m);	// 頂点の配列

		m_poly_geom = nullptr;
		v_pos[0] = m_pos;
		for (size_t i = 1; i < m; i++) {
			pt_add(v_pos[i - 1], m_diff[i - 1], v_pos[i]);
		}
		winrt::com_ptr<ID2D1GeometrySink> sink;
		winrt::check_hresult(
			s_d2d_factory->CreatePathGeometry(m_poly_geom.put())
		);
		m_poly_geom->Open(sink.put());
		sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
		const auto figure_begin = is_opaque(m_fill_color)
			? D2D1_FIGURE_BEGIN::D2D1_FIGURE_BEGIN_FILLED
			: D2D1_FIGURE_BEGIN::D2D1_FIGURE_BEGIN_HOLLOW;
		sink->BeginFigure(v_pos[0], figure_begin);
		for (size_t i = 1; i < m; i++) {
			sink->AddLine(v_pos[i]);
		}
		// Shape 上で始点と終点を重ねたとき,
		// パスに始点を加えないと, LINE_JOINT がへんなことになる.
		sink->AddLine(v_pos[0]);
		sink->EndFigure(D2D1_FIGURE_END_CLOSED);
		sink->Close();
		sink = nullptr;
	}

	// 図形を表示する.
	// dx	図形の描画環境
	void ShapePoly::draw(SHAPE_DX& dx)
	{
		if (is_opaque(m_fill_color)) {
			dx.m_shape_brush->SetColor(m_fill_color);
			dx.m_d2dContext->FillGeometry(m_poly_geom.get(), dx.m_shape_brush.get(), nullptr);
		}
		if (is_opaque(m_stroke_color)) {
			dx.m_shape_brush->SetColor(m_stroke_color);
			dx.m_d2dContext->DrawGeometry(
				m_poly_geom.get(),
				dx.m_shape_brush.get(),
				static_cast<FLOAT>(m_stroke_width),
				m_d2d_stroke_style.get());
		}
		if (is_selected() != true) {
			return;
		}
		anchor_draw_rect(m_pos, dx);
		D2D1_POINT_2F a_pos;
		pt_add(m_pos, m_diff[0], a_pos);
		anchor_draw_rect(a_pos, dx);
		const size_t n = m_diff.size();	// 差分の数
		for (size_t i = 1; i < n; i++) {
			pt_add(a_pos, m_diff[i], a_pos);
			anchor_draw_rect(a_pos, dx);
		}
	}

	// 塗りつぶし色を得る.
	// value	得られた値
	// 戻り値	得られたなら true
	bool ShapePoly::get_fill_color(D2D1_COLOR_F& value) const noexcept
	{
		value = m_fill_color;
		return true;
	}

	// 位置を含むか調べる.
	// t_pos	調べる位置
	// a_len	部位の大きさ
	// 戻り値	位置を含む図形の部位
	uint32_t ShapePoly::hit_test(const D2D1_POINT_2F t_pos, const double a_len) const noexcept
	{
		const size_t m = m_diff.size() + 1;	// 頂点の数 (差分の数 + 1)
		constexpr D2D1_POINT_2F PZ{ 0.0f, 0.0f };	// 零点
		size_t j = static_cast<size_t>(-1);	// 点を含む頂点の添え字
		size_t k = 0;	// 重複した頂点を除いた頂点の数
		std::vector<D2D1_POINT_2F> v_pos(m);	// 頂点の配列
		// 調べる位置が原点となるよう平行移動した四へん形の各頂点を得る.
		pt_sub(m_pos, t_pos, v_pos[k++]);
		if (pt_in_anch(v_pos[0], a_len)) {
			j = 0;
		}
		for (size_t i = 1; i < m; i++) {
			pt_add(v_pos[k - 1], m_diff[i - 1], v_pos[k]);
			if (pt_in_anch(v_pos[i], a_len)) {
				j = i;
			}
			if (pt_abs2(m_diff[i - 1]) > FLT_MIN) {
				k++;
			}
		}
		if (j != -1) {
			const auto anch = ANCH_WHICH::ANCH_P0 + j;
			return static_cast<uint32_t>(anch);
		}
		if (is_opaque(m_stroke_color) && k > 0) {
			// 辺が不透明なら, 線の太さをもとに, 幅をもつ辺を計算する.
			const auto width = max(max(m_stroke_width, a_len) * 0.5, 0.5);	// 幅

			// 各辺の法線ベクトルを得る.
			std::vector<D2D1_POINT_2F> n_vec(k);	// 法線ベクトル
			poly_get_nor(k, v_pos.data(), n_vec.data());

			//	多角形の各辺が位置を含むか調べる.
			std::vector<D2D1_POINT_2F> q_exp(k * 4);	// 幅をもつ辺
			if (poly_test_side(PZ, k, v_pos.data(), n_vec.data(), width, q_exp.data())) {
				// 含むなら ANCH_FRAME を返す.
				return ANCH_WHICH::ANCH_FRAME;
			}

			//	多角形の各角が位置を含むか調べる.
			//	角を超えて延長する長さは辺の太さの 5 倍.
			//	こうすれば, D2D の描画と一致する.
			const auto ext_len = m_stroke_width * 5.0;	// 延長する長さ
			if (poly_test_corner(PZ, k, q_exp.data(), n_vec.data(), ext_len)) {
				// 含むなら ANCH_FRAME を返す.
				return ANCH_WHICH::ANCH_FRAME;
			}
		}
		// 辺が不透明, または位置が辺に含まれていないなら,
		// 塗りつぶし色が不透明か調べる.
		if (is_opaque(m_fill_color)) {
			// 不透明なら, 位置が多角形に含まれるか調べる.
			if (pt_in_poly(PZ, k, v_pos.data())) {
				// 含まれるなら ANCH_INSIDE を返す.
				return ANCH_WHICH::ANCH_INSIDE;
			}
		}
		return ANCH_WHICH::ANCH_OUTSIDE;
	}

	// 範囲に含まれるか調べる.
	// a_min	範囲の左上位置
	// a_max	範囲の右下位置
	// 戻り値	含まれるなら true
	// 線の太さは考慮されない.
	bool ShapePoly::in_area(const D2D1_POINT_2F a_min, const D2D1_POINT_2F a_max) const noexcept
	{
		if (!pt_in_rect(m_pos, a_min, a_max)) {
			return false;
		}
		const size_t n = m_diff.size();	// 差分の数
		D2D1_POINT_2F e_pos = m_pos;
		for (size_t i = 0; i < n; i++) {
			pt_add(e_pos, m_diff[i], e_pos);	// 次の位置
			if (!pt_in_rect(e_pos, a_min, a_max)) {
				return false;
			}
		}
		return true;
	}

	// 塗りつぶしの色に格納する.
	void ShapePoly::set_fill_color(const D2D1_COLOR_F& value) noexcept
	{
		if (equal(m_fill_color, value)) {
			return;
		}
		m_fill_color = value;
		create_path_geometry();
	}

	// 図形を作成する.
	// s_pos	開始位置
	// diff	終了位置への差分
	// attr	属性値
	ShapePoly::ShapePoly(const D2D1_POINT_2F s_pos, const D2D1_POINT_2F diff, const ShapeSheet* attr) :
		ShapePath::ShapePath(4, attr)
	{
		m_pos.x = static_cast<FLOAT>(s_pos.x + 0.5 * diff.x);
		m_pos.y = s_pos.y;
		pt_scale(diff, 0.5, m_diff[0]);
		m_diff[1].x = -m_diff[0].x;
		m_diff[1].y = m_diff[0].y;
		m_diff[2].x = m_diff[1].x;
		m_diff[2].y = -m_diff[0].y;
m_diff[3].x = 0.0;
m_diff[3].y = 0.0;
		m_fill_color = attr->m_fill_color;
		create_path_geometry();
		//D2D1_POINT_2F q_pos[4];
		//q_pos[0] = { 0.0f, 0.0f };
		//q_pos[1] = m_diff[0];
		//q_pos[2] = m_diff[1];
		//q_pos[3] = m_diff[2];
	}

	// 図形をデータリーダーから読み込む.
	// dt_reader	データリーダー
	ShapePoly::ShapePoly(DataReader const& dt_reader) :
		ShapePath::ShapePath(dt_reader)
	{
		using winrt::GraphPaper::implementation::read;

		read(m_fill_color, dt_reader);
		create_path_geometry();
	}

	// データライターに書き込む.
	void ShapePoly::write(DataWriter const& dt_writer) const
	{
		using winrt::GraphPaper::implementation::write;

		ShapePath::write(dt_writer);
		write(m_fill_color, dt_writer);
	}

	// データライターに SVG タグとして書き込む.
	void ShapePoly::write_svg(DataWriter const& dt_writer) const
	{
		using winrt::GraphPaper::implementation::write_svg;

		write_svg("<path d=\"", dt_writer);
		write_svg(m_pos, "M", dt_writer);
		const size_t n = m_diff.size();	// 差分の数
		for (size_t i = 0; i < n; i++) {
			write_svg(m_diff[i], "l", dt_writer);
		}
		write_svg("Z\" ", dt_writer);
		ShapeStroke::write_svg(dt_writer);
		write_svg(m_fill_color, "fill", dt_writer);
		write_svg("/>" SVG_NL, dt_writer);
	}

}